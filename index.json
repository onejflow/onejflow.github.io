[{"authors":null,"categories":["DEV/Python"],"content":"uv는 패키지 management tool로 사용할 파이썬 버전부터 패키지 설치/관리와 패키지 빌드/배포까지 모두 가능한 툴로 명령어가 직관적이고 패키지 설치가 빠른게 나한테는 제일 큰 장점이다.\n사용방법 기본 프로젝트 시작 (uv init) # 프로젝트환경초기화 --app, --lib, --package 등이 있음 --app 이 디폴트 $ uv init 프로젝트명 --python 3.12 --app # 이를 통해 .git, .gitignore, .python-version, README.md, main.py, pyproject.toml이 만들어짐 $ git branch -m main # 가상환경 생성을 자동으로 해줌 (아래 명령어를 안해도 되는것이며 내부적으로 uv sync를 한번 하게 됨) $ uv run main.py # 이를 통해 .venv 와 uv.lock 파일이 생성 # 가상환경 생성 (파이썬 버전포함) $ uv venv --python 3.11.6 .venv # 가상환경 활성화 $ source .venv/bin/activate 패키지 설치 (uv add) # 가상환경 설정 - 사용할 라이브러리 설치 $ uv add numpy==1.26.4 pandas==2.0.3 pymysql==1.1.0 scikit-Learn==1.6.1 python-dotenv==1.0.1 mlflow==2.20.1 bentoml==1.3.21 tqdm==4.67.1 # 개발용라이브러리(Jupyter 등) 설치 $ uv add --\bdev jupyter ipykernel ipython pytest ruff black 기존 pip를 사용하려면 uv를 통해 설치 uv pip install \u0026lt;패키지명\u0026gt; uv pip install -r requirements.txt uv add vs uv pip install 차이 uv add 는 pyproject.toml 과 uv.lock 에 추가되어 협업자도 uv sync로 동일 환경을 만들 수 있음. 반대로 uv pip install은 의존성 파일에 남지 않아 테스트 또는 임시로 써볼 때 사용 pyproject.toml 과 uv.lock 은? pyproject.toml 과 uv.lock 은 라이브러리 설치 관련 이력관리, 즉 의존성 관리를 위해 존재한다. 둘의 차이는 pyproject.toml은 사람이 보기 편하게 의존성, 설정, 메타데이터가 정의된것이고, uv.lock은 정확한 패키지 버전 고정으로 uv sync를 통해 똑같은 환경 재현이 가능하다. uv 를 통한 실행 (uv run) uv run ruff check # ruff 코드 검사 실행 uv run main.py 패키지 삭제 (의존성 삭제) uv remove pytest #pyproject.toml 및 uv.lock에 반영된다 의존성 동기화 (uv sync) uv sync # uv.lock 파일을 기준으로 .venv 환경 구성 만약 reuqirements.txt만 있는 경우면 다음 아래와 같이 uv add를 할 수 있다. uv add -r requirements.txt python 설치 및 전환 uv python install 3.10 3.11 uv python pin 3.10 uvx \u0026lt;툴\u0026gt; (uv tool run 명령의 축약형)\nruff, mypy 등 서드파티 명령을 자동으로 설치·실행해준다. 예) uvx ruff check . uvx ruff format \\*.py ","date":1752883200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752883200,"objectID":"c31c8941bd6a0c0760bf07808b3747f0","permalink":"https://onejflow.github.io/post/3.resource/dev/python/uv-%EC%82%AC%EC%9A%A9%EA%B8%B0-%EB%B0%8F-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/","publishdate":"2025-07-19T00:00:00Z","relpermalink":"/post/3.resource/dev/python/uv-%EC%82%AC%EC%9A%A9%EA%B8%B0-%EB%B0%8F-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/","section":"post","summary":"파이썬 프로젝트를 할 때는 uv를 사용하자","tags":["Python"],"title":"[Python] uv 사용기 및 튜토리얼","type":"post"},{"authors":null,"categories":["Productivity"],"content":"졸업 이후 수식을 작성할 일이 거의 없어 잊고 있다가 다시 최근에 취미로 온라인 금융공학 석사를 하면서 필요하여 간단한 내용들을 정리해보았다. (물론 요새는 그냥 LLM에 수식을 작성해달라고 하면 잘 해줘서 작성해준 수식을 조금만 수정하면 된다.)\nMathematical Expressions 내가 보려고 정리한 LaTeX Math commands\nGreek letters Lower case α \\alpha β \\beta 𝛾 \\gamma δ \\delta ϵ \\epsilon ε \\varepsilon ζ \\zeta η \\eta θ \\theta ϑ \\vartheta 𝜄ι \\iota 𝜅 \\kappa λ \\lambda μ \\mu ν \\nu ξ \\xi π \\pi 𝜛 \\varpi ρ \\rho ϱ \\varrho 𝜎 \\sigma τ \\tau υ \\upsilon 𝜙 \\phi φ \\varphi χ \\chi 𝜓 \\psi ω \\omega Upper case Γ \\Gamma Δ \\Delta Θ \\Theta Λ \\Lambda Ξ \\Xi Π \\Pi Σ \\Sigma Υ \\Upsilon Φ \\Phi Ψ \\Psi Ω \\Omega Basic expression $ 하나면 in-line $$ 두개면 display\nSuper/sub script X^{2}_{a} $X^{2}_{a}$ Fraction \\frac{dx}{dt} $\\frac{dx}{dt}$ Integral \\int^{b}_{a}{f(x)dx} $\\int^{b}_{a}{f(x)dx}$ Partial derivative \\partial $\\partial$ Bracket \\left( a \\right) $\\left( a \\right)$ Root \\sqrt[3]{A} $\\sqrt[3]{A}$ Limit \\lim_{a \\to 0} $\\lim_{a\\to0}$ Infinity \\infty $\\infty$ Sum \\sum^{n}_{i=0} $\\sum^{n}_{i+1}$ Prod \\prod^{n}_{i=0} $\\prod^{n}_{i+1}$ vertical line \\vert $\\vert$ \\rvert a \\lvert $\\rvert a \\lvert$ \\rVert a \\lVert $\\rVert a \\lVert$ Times(multiplication) \\times $\\times$ Arrow \\to $\\to$ 1em space \\quad $a \\quad b$ Tip.\nFor multiple integrals, use: \\iint $\\iint$ \\iiint $\\iiint$ etc.\nFor a closed path integral, use: \\oint $\\oint$\nDots Multiplication dot \\cdot $\\cdot$ Three centered dots \\cdots $\\cdots$ Three baseline dots \\ldots $\\ldots$ Three diagonal dots \\ddots $\\ddots$ Three vertical dots \\vdots $\\vdots$ Accents $\\hat{a}$ \\hat{a} $\\bar{a}$ \\bar{a} $\\mathring{a}$ \\mathring{a} $\\check{a}$ \\check{a} $\\dot{a}$ \\dot{a} $\\vec{a} $ \\vec{a} $\\tilde{a}$ \\tilde{a} $\\ddot{a}$ \\ddot{a} $\\widehat{AAA}$ \\widehat{AAA} Relations $\\ne$ \\ne $\\le$ \\le $\\ge$ \\ge $\\equiv$ \\equiv $\\sim $ \\sim $\\simeq $ \\simeq $ \\approx$ \\approx $\\cong $ \\cong $\\propto$ \\propto $\\mid$ \\mid $\\parallel$ \\parallel $\\perp$ \\perp Matrix \\begin{bmatrix} a \u0026amp; b \u0026amp; c \\\\d \u0026amp; e \u0026amp; f \\\\g \u0026amp; h \u0026amp; i \\end{bmatrix} $$\\begin{bmatrix} a \u0026amp; b \u0026amp; c \\d \u0026amp; e \u0026amp; f \\g \u0026amp; h \u0026amp; i \\end{bmatrix}$$\nTip. Use \\\\ to separate different rows, and \u0026amp; to separate elements of each row.\nsmallmatrix: for inline matrix: No delimiter pmatrix: ( delimiter bmatrix: [ delimiter Bmatrix: { delimiter vmatrix: $\\vert$ delimiter Vmatrix: $\\Vert$ delimiter Cases \\begin{cases} x \u0026amp; \\text{if } x \u0026gt; 0 \\\\ 0 \u0026amp; \\text{if } x \\le 0 \\end{cases} $$ \\begin{cases} x \u0026amp; \\text{if } x \u0026gt; 0 \\ 0 \u0026amp; \\text{if } x \\le 0 \\end{cases} $$\nETC For all \\forall $\\forall$ There exist \\exists $\\exists$ Therefore \\therefore $\\therefore$ Because \\because $\\because$ if a then b (implies) \\implies $\\implies$ if and only if \\iif $\\iff$ ","date":1752364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752364800,"objectID":"12645c7d52896f5d4808db451d1137e0","permalink":"https://onejflow.github.io/post/3.resource/productivity/mathematical_expressions-%EC%A0%95%EB%A6%AC/","publishdate":"2025-07-13T00:00:00Z","relpermalink":"/post/3.resource/productivity/mathematical_expressions-%EC%A0%95%EB%A6%AC/","section":"post","summary":"내가 보려고 정리한 math expressions","tags":null,"title":"[ETC] LaTeX 수학 표현 정리","type":"post"},{"authors":null,"categories":null,"content":"1년 정도 넘게 Wezterm을 써오며 CLI tool 들과의 조합, 간단하게 터미널에서 코딩작업하기 편해 한번 소개겸 내 셋팅 방법을 정리해본다.\niterm2 또는 warp 이 주변에선 가장 많이 알려져 있지만 wezterm도 나름 팬층이 두텁고 mac,win,lunux를 지원하며 multiplex 기능이 내장되어 있다. (세션을 유지하려면 서버에도 wezterm을 설치 해야한다. 또한 컨테이너로 애플리케이션을 올리다보니 쉘 세션 유지의 필요성이 많이 감소하였다. 그래도 pane을 분할하고 사용하는게 정말 편하다)\nwezterm\nwezterm 설치 brew install –cask wezterm nerd font 설치 (터미널 아이콘 등) brew install font-meslo-lg-nerd-font wezterm config 셋팅 셋팅 파일 생성 touch ~/.wezterm.lua -- Pull in the wezterm API local wezterm = require(\u0026#34;wezterm\u0026#34;) -- This will hold the configuration. local config = wezterm.config_builder() -- This is where you actually apply your config choices config.front_end = \u0026#34;WebGpu\u0026#34; config.animation_fps = 30 config.font = wezterm.font(\u0026#34;MesloLGS Nerd Font Mono\u0026#34;) config.font_size = 18 config.enable_tab_bar = True config.window_decorations = \u0026#34;TITLE | RESIZE\u0026#34; config.window_background_opacity = 0.7 config.macos_window_background_blur = 10 -- and finally, return the configuration to wezterm return config 터미널 구성을 도와주는 Powerlevel10k\n터미널 구성을 마법사 형태로 구성할 수 있게 도와주는 오픈소스 brew install powerlevel10k echo “source $(brew –prefix)/share/powerlevel10k/powerlevel10k.zsh-theme” » ~/.zshrc source ~/.zshrc 만약 재설정을 하고 싶다면 p10k configure 이라고 터미널에 입력하면 된다 auto suggestion \u0026amp; syntax highlighting\nbrew install zsh-autosuggestions zsh-syntax-highlighting echo “source $(brew –prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh” » ~/.zshrc echo “source $(brew –prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh” » ~/.zshrc 가상환경 표시\n.zshrc 에 export VIRTUAL_ENV_DISABLE_PROMPT=0 입력 GPU 환경 확인하고 설정하기\nwezterm 터미널에서 CRTL-SHIFT-L 키 눌러서 확인 multiplexing 기능 활성화\n기능 요약 설명 key Pane 좌우분리(horizontal) CTRL+b % Pane 상하분리(\bvertical) CTRL+b \u0026#34; Pane 닫기 CTRL+b x Pane Resize 이며 방향키로 조절, 명령종료 시 esc CTRL+b r Pane 번호 표기 및 번호로 이동, 명령종료 시 esc CTRL+b q Pane Rotate 이며 방향키로 조절, 명령종료 시 esc CTRL+b c -- Muxtiplexing keymaps local act = wezterm.action config.leader = { mods = \u0026#34;CTRL\u0026#34;, key = \u0026#34;b\u0026#34;, timeout_milliseconds = 1000 } config.keys = { { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;\\\u0026#34;\u0026#34;, action = act.SplitVertical { domain = \u0026#34;CurrentPaneDomain\u0026#34; } }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;%\u0026#34;, action = act.SplitHorizontal { domain = \u0026#34;CurrentPaneDomain\u0026#34; } }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;x\u0026#34;, action = act.CloseCurrentPane { confirm = false } }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;LeftArrow\u0026#34;, action = act.ActivatePaneDirection \u0026#34;Left\u0026#34; }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;RightArrow\u0026#34;, action = act.ActivatePaneDirection \u0026#34;Right\u0026#34; }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;UpArrow\u0026#34;, action = act.ActivatePaneDirection \u0026#34;Up\u0026#34; }, { mods = \u0026#34;LEADER\u0026#34;, key = \u0026#34;DownArrow\u0026#34;, action = act.ActivatePaneDirection \u0026#34;Down\u0026#34; }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;a\u0026#39;, action = act.ActivateKeyTable { name = \u0026#39;activate_pane\u0026#39;, one_shot = false } }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;r\u0026#39;, action = act.ActivateKeyTable { name = \u0026#39;resize_pane\u0026#39; , one_shot = false } }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;c\u0026#39;, action = act.ActivateKeyTable { name = \u0026#39;rotate_pane\u0026#39; , one_shot = false } }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;]\u0026#39;, action = act.RotatePanes \u0026#34;Clockwise\u0026#34; }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;[\u0026#39;, action = act.RotatePanes \u0026#34;CounterClockwise\u0026#34; }, { mods = \u0026#39;LEADER\u0026#39;, key = \u0026#39;q\u0026#39;, action = act{PaneSelect={alphabet=\u0026#34;0123456789\u0026#34;}}}, } config.key_tables = { activate_pane = { { key = \u0026#39;LeftArrow\u0026#39;, action = act.ActivatePaneDirection \u0026#39;Left\u0026#39; }, { key = \u0026#39;RightArrow\u0026#39;, action = act.ActivatePaneDirection \u0026#39;Right\u0026#39; }, { key = \u0026#39;UpArrow\u0026#39;, action = act.ActivatePaneDirection \u0026#39;Up\u0026#39; }, { key = \u0026#39;DownArrow\u0026#39;, action = act.ActivatePaneDirection \u0026#39;Down\u0026#39; }, -- Cancel the mode by pressing escape { key = \u0026#39;Escape\u0026#39;, action = \u0026#39;PopKeyTable\u0026#39; }, }, resize_pane = { { key = \u0026#39;LeftArrow\u0026#39;, action = act.AdjustPaneSize { \u0026#39;Left\u0026#39;, 1 } }, { key = \u0026#39;RightArrow\u0026#39;, action = act.AdjustPaneSize { \u0026#39;Right\u0026#39;, 1 } }, { key = \u0026#39;UpArrow\u0026#39;, action = act.AdjustPaneSize { \u0026#39;Up\u0026#39;, 1 } }, { key = \u0026#39;DownArrow\u0026#39;, action = act.AdjustPaneSize { \u0026#39;Down\u0026#39;, 1 } }, { key = \u0026#39;Escape\u0026#39;, action = \u0026#39;PopKeyTable\u0026#39; }, }, rotate_pane = { { key = \u0026#39;RightArrow\u0026#39;, action = act.RotatePanes \u0026#34;CounterClockwise\u0026#34; }, { key = \u0026#39;LeftArrow\u0026#39;, action = act.RotatePanes \u0026#34;Clockwise\u0026#34; }, { key = \u0026#39;Escape\u0026#39;, action = \u0026#39;PopKeyTable\u0026#39; }, }, } 참고로 vscode 같은 경우 터미널을 사용할 시 기본 설정되어 있는 부분을 wezterm을 불러오는 셋팅과 더불어 폰트도 설정해두면 아이콘이 깨지거나 하지 않는다. { \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;MesloLGS Nerd Font Mono\u0026#34;, \u0026#34;editor.fontFamily\u0026#34;: \u0026#34;MesloLGS Nerd Font Mono\u0026#34; } ","date":1752364800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752364800,"objectID":"061bc312fba12aa2e2cca776872f04fb","permalink":"https://onejflow.github.io/post/3.resource/productivity/%ED%84%B0%EB%AF%B8%EB%84%90-%EC%85%8B%ED%8C%85-weztermzsh/","publishdate":"2025-07-13T00:00:00Z","relpermalink":"/post/3.resource/productivity/%ED%84%B0%EB%AF%B8%EB%84%90-%EC%85%8B%ED%8C%85-weztermzsh/","section":"post","summary":"Wezterm 설치 및 설정 방법","tags":null,"title":"[\bProductivity] mac 터미널 세팅기","type":"post"},{"authors":null,"categories":["DEV"],"content":"혼자서만 사용하므로 간단히 main을 가지고 브랜치를 생성하여 사용한다.\nmain에 기능별 feature/a , feature/b 등 브랜치를 생성후 머지 버전 관리는 git 태그 *github과 연동하기 위한 개인 엑세스 토큰 또는 SSH key 는 설정하였다 가정한다. 위치 명령어 또는 액션 설명 Github repository를 생성한다. README.md 까지 같이 해준다. 로컬에서 프로젝트를 먼저 시작하고 repository를 생성 후 연동도 가능하다. 로컬 git clone \u0026lt;URL\u0026gt;ssh -T git@github.com-flowgit clone git@github.com-flow:깃헙이름/깃헙레파지토리.git 로컬에 작업할 디렉토리로 가서 원격 저장소를 clone 한다.클론할 때 HTTPS 방식으로 clone 토큰을 입력하거나 자기가 설정한 Github ssh를 먼저 테스트 후 ssh 방식으로 clone 받아도 된다. 로컬 git branch feature/a git switch feature 로컬에서 feature/a 라는 브랜치를 만든 뒤 해당 브랜치로 변경한다. 로컬 vi feature_a.md feature_a 라는 마크다운 파일을 만들고 기능예시를 적는다. 로컬(feature/a 브랜치) git add .git commit -m \u0026#34;feat: a 기능 추가 변경사항을 add, commit 해준다. 로컬(main) git switch maingit merge --no-ff feature/a main 브랜치로 돌아와서 feature/a merge merge할 때 feature/a 에서 커밋한 내역, merge에 대한 로그를 남긴다.git log 를 통해 확인 가능하다. 로컬(main) git tag -a v1.0.0 -m \u0026#34;Release v1.0.0\u0026#34; v1.0.0 이라고 태그를 남긴다.태그는 커밋과 별개의 작업이라 태그한 버전을 푸시 하고 싶다면 git push origin v1.0.0 로컬(main) git push --tags origin main main을 태그와 함께 Github repo로 push한다. 지금까지는 로컬에서 브랜치 작업을 하고 로컬main 에 머지 한 뒤 main만 github에 push한 상황이다. 이제 로컬에서 브랜치 작업을 하고 그대로 github에 올리는 방식으로 해보겠다.\n위치 명령어 또는 액션 설명 feature/a와 동일한 방법으로 feature/b를 만든 후 touch feature_b.md 로 파일만 만든다. 로컬(feature/b 브랜치) git add .git commit -m \u0026#34;feat: b 기능추가 아직 기능 완성을 다 하진 않았지만 변경사항 저장을 위해 커밋한다 로컬(feature/b 브랜치) git push -u origin feature/b 로컬의 feature/b 브랜치를 Github에 push한다. 이러면 github에 해당 브랜치가 올라간걸 볼 수 있다. GitHub 웹 UI Merge Pull Request → 클릭 후 “Delete branch” 버튼 클릭 머지 완료 즉시 원격 브랜치를 바로 삭제 터미널 (원격 삭제 대체) git push origin --delete feature/b GitHub 웹 UI 대신 터미널에서 원격 브랜치 삭제 로컬(main) (선택) git branch -d feature/b or git branch -D feature/b 안전하게 머지된 브랜치만 삭제하려면 -d, 강제로 삭제하려면 -D 사용 로컬(main) git pull 원격 main과 로컬 main을 동기화 로컬(main) git switch -c feature/c 최신 main을 기준으로 새로운 feature 브랜치(feature/c) 생성 로컬(feature/c) 작업 후 git add . git commit -m \u0026#34;feat: …\u0026#34; 새로운 기능 개발 커밋 로컬(feature/c) → GitHub git push -u origin feature/c 새 브랜치를 원격에 올려 협업 준비 Github에서는 따로 태그만 할 수는 없고 릴리스를 하면된다\n위치 명령어 또는 액션 설명 GitHub 웹 Repository → Releases → “Create a new release” 릴리즈 생성 페이지로 이동 GitHub 웹 Tag version 입력 (예: v1.0.0) 새 태그 생성 또는 기존 태그 선택 GitHub 웹 Release title 및 Description 작성 릴리즈 제목과 변경사항 설명 GitHub 웹 Target branch 선택 (main) 릴리즈할 브랜치 선택 GitHub 웹 “Publish release” 클릭 릴리즈 및 태그 동시 생성 ","date":1752105600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752105600,"objectID":"8fc0cc99687c732b42742d77583a0a74","permalink":"https://onejflow.github.io/post/3.resource/dev/git/gitgithub-%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B2%95/","publishdate":"2025-07-10T00:00:00Z","relpermalink":"/post/3.resource/dev/git/gitgithub-%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B2%95/","section":"post","summary":"개인 프로젝트를 할 때 내가 Git\u0026Github을 사용하는 방식","tags":["Git"],"title":"[Git] Git\u0026Github 개인 프로젝트를 위한 사용법","type":"post"},{"authors":null,"categories":["DEV"],"content":"Github 의 개인 엑세스 토큰 생성 Settings \u0026gt; Developer Settings \u0026gt; \bPersonal access tokens 에서 “Fine-grained tokens” 또는 Tokens(classic) 을 클릭하고 Generate new token 을 클릭 후 필요한 권한을 선택한 후 토큰을 생성 두 토큰의 차이는 Fine-grained tokens쪽이 좀 더 세밀한 권한 제어, 보안 기능을 제공하는데 개인 사용 목적이면 classic으로 하는게 간편하다. classic 의 경우 토큰 만료 기한, repo, admin:repo_hook, delete_repo 정도 설정해준다 이제 로컬에서 git clone, push등 github repo의 접근해야하는 명령시, Password로 발급받은 토큰을 입력하면 된다. git push origin main // 클론 받을 때 Username for \u0026#39;https://github.com\u0026#39;:\u0026#39;사용자 이름\u0026#39; Password for \u0026#39;https://example@github.com\u0026#39;: \u0026#39;발급 받은 토큰\u0026#39; 매번 username과 토큰을 입력해주기 번거롭다면? //Credential 정보를 반영구 저장 하는 방식 1. git config --unset credential.helper # 이 과정의 경우 기존에 세팅된 credential.helper 데이터를 해제할 때만 사용한다. 2. git config credential.helper store # store 된 데이터는 따로 설정해 주지 않았다면 ~/.git-credentials에 저장됨 //Credential 정보를 특정 시간동안 git cache에 임시로 저장하는 방식 1. git config --unset credential.helper # [이 과정의 경우 기존에 세팅된 credential.helper 데이터를 해제할 때만 사용한다.] 2. git config credential.helper cache 3. git config credential.helper \u0026#39;cache --timeout 7200\u0026#39; # [초단위 이며, 필요에 따라 변경한다. Default는 900초] SSH key 방식 1. SSH Key 생성하기 계정 별로 생성해준다! 숨김 폴더인 .ssh 상에 기존 ssh key 가 있는지 확인한다. 난 깔끔하게 가기 위해 id_rsa, id_ras.pub를 다 삭제해줬다. cd ~/.ssh ls -al ssh key를 생성하기 위해 아래 명령어를 쳐준다. 깃헙에서 사용하는 email과 이제 만들어줄 ssh key의 이름을 먼저 정한다. 개인 계정1 : 내 깃헙아이디1@이메일주소 \u0026amp;\u0026amp; id_rsa_flow 개인 계정2 : 내 깃헙아이디2@이메일주소 \u0026amp;\u0026amp; id_rsa_ooo ssh-keygen -t rsa -C \u0026#34;onej.flow@gmail.com\u0026#34; -f \u0026#34;id_rsa_flow\u0026#34; ssh-keygen -t rsa -C \u0026#34;개인이멜주소\u0026#34; -f \u0026#34;id_rsa_ooo\u0026#34; 3. 공개키+개인키를 만들고 있고 구문을 넣으라고 하는데 엔터치면서 생략함\n키 관리를 위해 ssh-agent에 새로 생성한 키들을 저장해준다. 아래 명령어로 백그라운드에 ssh-agent를 실행 시켜준다. 참고로 pid 값은 매번 바뀐다고함\n$ eval \u0026#34;$(ssh-agent -s)\u0026#34; \u0026gt; Agent pid 29384 아래 명령어로 각각 생성한 개인키를 ssh-agent에 저장해준다.\nssh-add ~/.ssh/id_rsa_flow # 출력 Identity added: /Users/wjchoi/.ssh/id_rsa_flow 아래 명령어로 ssh-agent에 정상적으로 ssh 개인키가 추가되었는지 재확인 해준다.\nssh-add -l # 출력 : 3072 SHA256:ky... 개인계정주소 (RSA) 2. 깃헙에 새로운 SSH 공개 Key 추가해주기 공개키 복사를 위해 위에서 생성된 id_rsa_flow.pub 와 id_rsa_ooo.pub를 복사해야한다. 복사하거나 편집기를 열어서 복사하는 방법이 있다.\n# 복사하기 pbcopy \u0026lt; ~/.ssh/id_rsa_flow.pub # 편집기 열기 code ~/.ssh/id_rsa_flow.pub 복사를 했으면, 깃헙 계정 - 프로필 클릭 - Settings - SSH and GPG keys 클릭 -\u0026gt; New SSH Key 클릭 -\u0026gt; 아래 두 항목 작성하기 - Title : 기억하기 좋은 공개키 이름, 별명 적기 - Key : 위에서 복사한 공개키 넣기 계정별로 실행\n3. SSH config 파일 설정 후 테스트 config 파일 만들고 환경 설정해주기 cd ~/.ssh vi config 각 계정마다 환경 설정을 해주는데, 되도록 아래의 양식을 지켜준다. 특히 Host 부분을 잘 지을 것 ssh 에이전트는 터미널 세션을 열 때마다 새롭게 실행, ssh-add를 실행함. 세션이 종료될 때 등록된 키도 사라짐 그래서 자동 로드하기 위해 AddkeysToAgent 를 추가한다. ssh -T git@github.com-flow 로 확인 시 ~/.ssh/config 에 설정한 대로 github.com-flow 별칭 사용하여 github.com에 ssh 연결을 시도함 #flow 계정에 대한 SSH 설정 Host github.com-flow HostName github.com User 유저 아이디 IdentityFile ~/.ssh/id_rsa_flow AddKeysToAgent yes # 2번째 계정에 대한 SSH 설정 Host github.com-flow : 나중에 ssh로 연결할 때 Host 지시자로 설정한 값을 사용하니 구분이 쉽고 편한 이름으로 작성한다. HostName github.com : github 도메인 User 유저 아이디 : github 사용자 아이디 (github 아이디로 설정) IdentityFile ~/.ssh/id_rsa_flow : 위에서 만든 개인키 경로 나중에 SSH 연결을 할 때 Host에 설정해둔 값인 github.com-flow 으로 호출하면, 지정한 HostName(깃헙)에 접속해서 User로 지정해둔 깃헙 계정을 가지고 IdentityFile 에 적어둔 개인키 경로에서 그 개인키를 참조해 인증하는 방식이다.\n아래 명령어로 ssh 연결 테스트 ssh -T git@github.com-flow # 출력 : Hi 깃헙 계정! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 4. SSH 로 깃헙 레파지토리 클론 받아보기 클론할 레파지토리 - code 클릭 후 HTTPS가 아니라 SSH 클릭해서 복사하면 아래와 같이 나올 것이다. git@github.com:깃헙이름/깃헙레파지토리.git 이걸 이제 아래와 같이 바꿔서 클론해준다. 즉 github.com 를 위의 ssh config 파일의 Host로 지정한 github.com-flow 를 넣어준다!\n$ git clone git@github.com-flow:깃헙이름/깃헙레파지토리.git 커밋이나 푸쉬 하기 전 user.name과 user.email을 확인해서 수정해주고 커밋하고 푸쉬해야한다. git config user.name 계정아이디 git config user.email 계정이메일 # 전역으로 설정하고자 할 때 --global로 설정 git config --global user.name git config --global user.email # 설정 잘 됐는지 확인하려면 아래 명령어로 확인 git config user.name git config user.email git config --list # 여러정보 확인 ","date":1751932800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1751932800,"objectID":"71cd467fcf00530d1d551ca8697d0bcf","permalink":"https://onejflow.github.io/post/3.resource/dev/git/gitgithub-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/","publishdate":"2025-07-08T00:00:00Z","relpermalink":"/post/3.resource/dev/git/gitgithub-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/","section":"post","summary":"\b토큰 방식과 한 로컬에서 여러 Github 계정도 사용가능한 SSH key를 이용한 방식","tags":["Git"],"title":"[Git] Git\u0026Github 연동하기","type":"post"},{"authors":null,"categories":["DEV"],"content":"로컬 환경에 git 시작 및 변경 사항 확인 후(status) 버전 저장 (add, commit) 하기 명령어 설명 예시 또는 추가 설명 예시 설명 git init 로컬 환경에 레파지토리 만들기 .git 디렉토리가 생성되며 버전관리 시작 git branch -M main 현재 브랜치의 이름을 main 으로 변경 M 옵션으로 강제 git branch -M old-branch-name main git status 현재 로컬 저장소의 현황 확인- 현재 브랜치- 커밋되지 않은 변경 사항 (changes not staged)- 추적되지 않는 파일 (untracked) git add 파일명 해당 파일을 깃에서 추적하도록 함(스테이징) git add . 모든 파일 추적 git commit git add로 스테이징 된 변경사항을 스냅샷으로 기록 git commit -m \u0026#34;Doc: write README.md\u0026#34; 커밋 메세지 남김 커밋 상태 되돌리기 (reset, revert) reset : 지정한 커밋으로 이동(지정 커밋 이후의 히스토리 초기화) revert : 지정한 커밋의 내용으로 새로운 커밋 생성(히스토리 보존)\n명령어 설명 예시 또는 추가 설명 예시 설명 git reset --hard {이전 과정의 해시값 또는 HEAD~n} hard 옵션은 모든 커밋, 과정, 파일을 삭제, 이전 상태로 복구하고 싶을 때 사용 (git commit, git add, modified된 코드 취소) git reset --mixed {이전 과정의 해시값 또는 HEAD~n} 모든 커밋, 과정을 삭제. 파일은 존재하지만, 작업 영역에만 있는 상태, 즉 add하지 않은 상태 (git commit, git add 취소) –hard를 쓰는 대신 –mixed로 이전 코드를 확인한 뒤 정말 필요 없다 판단시 git restore \u0026lt;파일명\u0026gt; 으로 현재 커밋 상태로 되돌리는게 좋다. git reset --soft {이전 과정의 해시값 또는 HEAD~n} 커밋만 삭제, 커밋 로그를 바꿀 때 사용 (git commit 취소), 주로 권장되는 방식 git revert \u0026lt;커밋 id\u0026gt; 기존 커밋들을 지우지 않고, 현재 커밋 위로 이전 커밋 내용을 다시 되돌림 반드시 직전 commit으로 되돌아가야 한다 만약 처음 commit으로 돌아가고 싶다면 revert를 연속으로 하여 되돌아가야함 HEAD~n (n은 1,2,3, …) 하면 현재 commit의 직전 n번째 commit을 뜻함 (git reset HEAD~1처럼 사용) - 로컬에 commit만 한 경우에는 reset을 사용. 하지만 협업을 위해 원격 저장소로 push된 경우 reset 사용 X\n- 사용하게 되면, reset 하고자 하는 커밋 이력으로 돌아간 다음 해당 커밋 이후의 커밋 히스토리들이 전부 삭제됨. 그렇기에 로컬 저장소에 있는 커밋 히스토리와 원격 저장소에 있는 커밋 히스토리가 달라 Error가 발생 최신 커밋 관리하기 - 최신커밋에 수정내용 추가하기 (amend) 최근 커밋들 합치기 (rebase) 명령어 설명 예시 또는 추가 설명 예시 설명 git commit --amend 추가로 git add 후, 가장 최신 커밋(HEAD)에 수정 내용 추가 git rebase -i HEAD~2 가장 최근 커밋 2개의 커밋 합치기i를 통해 인터랙티브 모드로 실행하여 남길 커밋을 정하고 저장하고 나오기 HEAD 는 커밋 내역에서 현재 커밋(보통 가장 최신 커밋)을 가리키는 심볼릭 링크(포인터). HEAD의 이전 커밋들을 확인하고 싶을 땐 HEAD^ 혹은 HEAD~으로 포인팅이 가능.만약 HEAD로부터 3개 전의 Commit에 접근하고 싶다면 HEAD^^^ 혹은 HEAD~3으로 표현 원격 레포지토리(github) 와 연계하여 작업 하기 remote add origin, clone, push, pull case1: 로컬에서 작업을 시작 → 새 원격 저장소 생성 후 푸시 단계 명령어 설명 1 git init 현재 폴더를 새 Git 저장소로 초기화 2 (필요한 파일 생성·수정) 코드‧문서 작성 3 git add . 모든 변경된 파일 스테이징 4 git commit -m \u0026#34;첫 커밋\u0026#34; 스냅샷 저장 5 GitHub에서 새 Repository 생성 URL 예시: https://github.com/USER/REPO.git 6 git remote add origin \u0026lt;URL\u0026gt; 로컬 repo에 원격 origin 등록 origin 은 alias 임 7 git branch -M main 기본 브랜치를 main으로 통일(선택) 8 git push -u \u0026lt;alias\u0026gt; \u0026lt;branch\u0026gt; git push -u origin main원격으로 최초 푸시(추후 git push만으로도 가능) case2: 원격 저장소를 먼저 만들고 → 클론 → 수정 후 푸시 clone 대신 위 처럼 remote add 후 git pull origin main --rebase 도 가능\n--rebase 옵션은 누군가 push한 내용이 있을 때 시간 순서로 병합하는 옵션 단계 명령어 설명 1 GitHub에서 새 Repository 생성 URL 예시: https://github.com/USER/REPO.git 2 git clone \u0026lt;URL\u0026gt; 원격 저장소를 로컬로 복제 → 새 폴더 생성git clone 으로 . 을 붙이면 현재 디렉토리에 파일들을 받아오고 아니면 원격 레포 명으로 새 디렉토리 생성 3 cd REPO 작업 디렉터리 이동 4 (파일 수정·추가) 코드 작성 5 git add . 변경 파일 스테이징 6 git commit -m \u0026#34;기능 추가\u0026#34; 커밋 7 git push 기본 브랜치(main)로 푸시 다른 브랜치로 작업하려면 branch, switch git branch feature/새기능 → git switch branch feature/새기능 → 작업·커밋 → git push -u origin feature/새기능 git branch \u0026lt;new 브랜치명\u0026gt; \u0026lt;분기대상(ex.main)\u0026gt; , -d 옵션으로 브랜치 삭제 공통 참고 명령어 목적 명령어 설명 원격 URL 확인 git remote -v 읽기·쓰기 URL 목록 표시 원격 URL 변경 git remote set-url origin \u0026lt;새URL\u0026gt; 저장소 이전·HTTPS ↔ SSH 전환 최신 내용 가져오기 git pull 원격 변경 사항 병합 브랜치-목록 git branch -a 로컬·원격 브랜치 모두 보기 커밋한 히스토리 파악 후 다른 버전 상태(commit)로 이동하기 (check out) 명령어 설명 예시 또는 추가 설명 예시 설명 git log 커밋한 히스토리 확인 (–oneline –decorate –graph 옵션으로 커밋의 전체방향과 흐름 파악 git reflog 를 사용하면 git reset,rebase명령어로 삭제된 커밋을 포함한 모든 커밋 히스토 git checkout commit-hash git log 를 보면 commit-hash가 있으며 이로 이동할 수 있음. (최소 앞자리 4개만 쓰면 됨)- 이전 버전으로 돌아가면 변경사항도 git checkout 3d80b6f 참고로 checkout 명령어는 commit 뿐만 아니라 branch를 이동할 때에도 사용된다.다시 원래 작업공간으로 돌아오려면 git checkout main 과 같이 main 또는 원래 작업 공간을 작성하면 된다. checkout은 브랜치 변경, 작업중인 트리 파일 복원 등 기능이 많아 이후 git switch(브랜치 전환 전용), git restore (파일복원 전용) 이 도입됨 브랜치 관련 기능: 기존 브랜치로 전환: git checkout 브랜치명 새 브랜치 생성 및 전환: git checkout -b 새브랜치명 특정 커밋에서 새 브랜치 생성: git checkout -b 새브랜치명 커밋해시 파일 복원 기능: 워킹 디렉토리 파일 복원: git checkout – 파일명 특정 커밋 상태로 파일 복원: git checkout 커밋해시 – 파일명 기타 기능: 특정 커밋으로 이동 (detached HEAD): git checkout 커밋해시 브랜치 만들어 작업하기 (branch, switch) 단계 명령어 설명 예시 및 추가 설명 1 git branch \u0026lt;브랜치명\u0026gt; 새로운 브랜치 생성 (현재 브랜치 위치를 기준으로 분기) git branch feature/login 2 git switch \u0026lt;브랜치명\u0026gt; 해당 브랜치로 전환 git switch feature/login 3 git switch -c \u0026lt;브랜치명\u0026gt; 브랜치 생성(-c = create) 및 즉시 전환 git switch -c feature/payment 브랜치를 원하는 브랜치에 합치기 (merge –no-ff) 단계 명령어 설명 예시 및 추가 설명 1 git switch \u0026lt;기준_브랜치\u0026gt; 변경 사항을 합칠 기준 브랜치로 전환 git switch main 2 git merge --no-ff \u0026lt;머지할_브랜치\u0026gt; 기준 브랜치에 머지할 브랜치를 병합하되, fast-forward를 방지하고 항상 새 병합 커밋을 생성 → 병합 기록이 명확히 남음 git merge --no-ff feature/login – feature/login의 커밋 기록을 새 병합 커밋으로 합침 --squash 또는 --rebase 옵션은 머지 커밋 기록을 남기지 않음 → 병합 내역 추적이 어려워 가급적 사용 지양 커밋에 tag 달아주기 명령어 설명 예시 또는 추가 설명 예시 설명 git tag v1.0.0 현재 커밋에 v1.0.0 이라는 버전 태그 추가 git tag -n 태그 목록 표시 및 설명 확인 git push --tags origin main 로컬 태그와 main 브랜치를 github에 푸시 변경 사항 일시 저장 명령어 설명 git stash save \u0026#34;임시 저장\u0026#34; 현재 작업 중인 변경 사항을 stash(임시저장소) 에 저장 하면서 “임시 저장” 같은 설명 추가 git stash pop {index 번호} 저장된 스태시를 다시 작업 디렉토리로 불러와 적용한 후, 해당 스태시는 삭제, index를 지정 시 해당 스태시를 가져오고 지정하지 않ㅇ으면 가장 최근 스태시 항목을 가져옴git stash list 를 통해 스태시 항목 확인 git stash apply 저장된 스태시를 작업 디렉토리에 적요 …","date":1751673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1751673600,"objectID":"b24373d504656e864a544f2eb0ce5267","permalink":"https://onejflow.github.io/post/3.resource/dev/git/%EC%9E%90%EC%A3%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C/","publishdate":"2025-07-05T00:00:00Z","relpermalink":"/post/3.resource/dev/git/%EC%9E%90%EC%A3%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-git-%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%AA%A8%EC%9D%8C/","section":"post","summary":"\bGit 기본 명령어 정리","tags":["Git"],"title":"[Git] 자주 활용하는 Git 명령어 모음","type":"post"},{"authors":null,"categories":["DEV"],"content":"원격 시동(WOL) 및 VPN 접속을 위한 Iptime 공유기 설정 보안 및 네트워크 관련 iptime 제조사의 서비스 페이지 에 가면 링크된 포스트와 같이 다양한 가이드를 안내해준다. 우선 관리자 계정을 생성한 뒤, 사용하고 있는 Iptime의 펌웨어를 최신으로 업데이트 해준다. 국가별 접속제한 기능 등 iptime의 여러 보안 기능을 설정한다. vpn 관련 Iptime에 WireGuard VPN을 이용하여 내부망으로 접근하게 하려면 WireGuard 서버 설정을 실행한 다. 자신의 컴퓨터, 핸드폰 등에 WireGuard VPN 앱을 설치한 뒤 공개키를 입력하여 등록하면 된다. WOL 설정\nIptime 에서 설정해야 할 부분과 Proxmox 서버에서 설정해야할 부분이 나뉜다.\nProxmox 서버 ethtool 설치 apt intall ethtool (이미 설치되어 있을 거임)\n현재 사용 어댑터 명, Mac, IP주소 확인 ip addr\n차례대로 emp1s0, a8:a1:59:5a:ba:c2, 192.168.1.200/24 Wake-on 확인 ethtool [어댑터이름] d면 현재 꺼져있는 상태\nWOl활성화 ethtool -s [어댑터이름] wol g\nethtool -s enp1s0 wol g 인터페이스 설정으로 가서 재부팅시 자동 wol 옵션 추가\nvi /etc/network/interfaces post-up /usr/sbin/ethtool -s [인터페이스이름] wol g 를 추가 post-up /usr/sbin/ethtool -s enp1s0 wol g auto lo iface lo inet loopback iface enp1s0 inet manual post-up /usr/sbin/ethtool -s enp1s0 wol g auto vmbr0 iface vmbr0 inet static address 192.168.0.21/24 gateway 192.168.0.1 bridge-ports enp1s0 bridge-stp off bridge-fd 0 iface wlp3s0 inet manual 이후 Iptime 에서 WOL 메뉴로 들어가 PC 이름과 MAC 주소를 등록하면 된다. 로컬피씨에서 vm 으로 만든 우분투 ssh접속 하는법 SSH 키 페어 생성 (로컬 PC에서) 먼저 SSH 접속에 사용할 키 페어(공개 키와 개인 키)가 없다면 생성해야 한다.\nssh-keygen -t ed25519\n**ed25519**는 rsa 등 다른 암호화 알고리즘보다 더 현대적이고 안전한 방식으로 권장된다고 한다. 키를 저장할 위치를 물으면 기본 경로(예: ~/.ssh/id_ed25519)를 그대로 사용하기 위해 Enter 키를 누른다. 암호(passphrase)를 입력하라는 메시지가 나타나면, 암호 없이 편리하게 접속하고 싶을 경우 그냥 Enter 키를 두 번 누른다. (나 같은 경우는 간단히 vm이라고 따로 입력하였다.) 공개 키 내용 복사 (로컬 PC에서) 생성된 공개 키의 내용을 복사한다\ncat ~/.ssh/id_ed25519.pub\n**ssh-ed25519**로 시작해서 사용자 이름과 호스트명으로 끝나는 전체 문자열을 복사한다. Proxmox GUI에서 공개 키 등록 이제 복사한 공개 키를 Proxmox 웹 GUI를 통해 VM에 등록한다.\nProxmox 웹 GUI에 접속하여 해당 Ubuntu VM을 선택\nCloud-Init → SSH Public Key 입력란에 위에서 복사한 공개 키 전체를 붙여 넣는다\nUser 항목에 VM에 생성할 사용자 이름을 지정한다. Ubuntu 클라우드 이미지의 기본 사용자는 보통 ubuntu 이지만 나는 따로 설정하였다.\nHardware 탭에서 CloudInit Drive가 추가되어 있는지 확인한다. 만약 없다면 **Add \u0026gt; CloudInit Drive**를 통해 추가해야 한다. Proxmox는 이 가상 CD-ROM 드라이브를 통해 VM에 설정 정보를 전달한다.\nVM 재부팅 및 SSH 접속\n설정을 적용하기 위해 VM을 재부팅 후, 로컬 PC의 터미널에서 다시 SSH 접속을 테스트를 한다. 이때 root가 아닌 Cloud-Init에서 설정한 사용자 이름(예: ubuntu)으로 접속해야 한다. 예를 들자면\nssh ubuntu@192.168.0.59 이다.\n참고: “Host key” 경고 메시지에 대하여** The authenticity of host... can\u0026#39;t be established. 메시지는 VM 서버 IP 주소에 처음 접속하기 때문에 나타나는 자연스러운 경고다. 하지만 메시지 내용 중 **This host key is known by... 192.168.0.60**라는 부분은, 과거에 192.168.0.60이라는 다른 서버에 접속했던 기록이 있는데, 지금 접속하려는 192.168.0.59 서버가 동일한 호스트 키를 사용하려고 할 때 발생할 수 있다. 이는 VM을 복제했거나 IP를 재사용한 경우 발생한다.\n**yes**를 입력하여 키 정보를 갱신하면 Permission denied 오류만 해결하면 된다. 로컬 PC의 ~/.ssh/known_hosts 파일에서 해당 IP 주소와 관련된 줄을 삭제하거나 다음 명령어로 간단히 삭제할 수 있다. ssh-keygen -R 192.168.0.59\n마무리 이로써 기본적인 구성은 완료하였고, 추후 노드를 추가 증설하거나 스펙업을 하게 될 시 Proxmox backup server, HA (high availability) 기능을 더 구축하려고 한다. 이 외에도 VLAN Zone을 구축하고 싶은데 아무래도 네트워크 및 보안 관련 지식이 없다 보니 시간 날 때 공부하면서 설정하려고 한다.\n","date":1750896e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1750896e3,"objectID":"d4b550c94d5273d40ff7b9eed312dd6f","permalink":"https://onejflow.github.io/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---2/","publishdate":"2025-06-26T00:00:00Z","relpermalink":"/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---2/","section":"post","summary":"Iptime 공유기를 통한 WOL, VPN 및 서버 접속","tags":["DEV/HomeLab"],"title":"[Proxmox] 미니 HomeLab (홈서버) 구축기 with proxmox - 2","type":"post"},{"authors":null,"categories":["DEV"],"content":"Proxmox 초기 설정 처음엔 초기 세팅을 위해 공식문서 및 관련 자료들을 보며 이것저것 만지다가 초기 설정 관련해서 자동화해주는 script가 있어 이를 활용해 다시 하였다. (그래서 순서가 좀 뒤죽박죽일 수 있다.)\nhttps://community-scripts.github.io/ProxmoxVE/ 에서 필요한 script들을 찾아 실행하면 됨으로 아주 간편하다.\nProxmox web GUI 에서 미니pc 3대에 설치된 Proxmox 각각을 같이 관리하기 위해 Proxmox Cluster를 설정하였다.\nhttps://svrforum.com/os/146219 여기에 가면 하는 방법이 잘 나와있다. Proxmox를 처음 설치 시, 기업용으로 사용할게 아니기 때문에 해줘야하는 설정들이 있는데 아래 스크립트에서 자동으로 처리를 해준다.\n엔터프라이즈 저장소 비활성화, PVE 소스 추가·수정, 구독 없는(No-Subscription) 저장소 활성화, 테스트 저장소 추가, 구독 알림(Subscription Nag) 비활성화, Proxmox VE 업데이트를 위한 스크립트 https://community-scripts.github.io/ProxmoxVE/scripts?id=post-pve-install 내가 한 옵션은 다음과 같다\n✓ Corrected Proxmox VE Sources ✓ Disabled \u0026#39;pve-enterprise\u0026#39; repository ✓ Enabled \u0026#39;pve-no-subscription\u0026#39; repository ✓ Corrected \u0026#39;ceph package repositories\u0026#39; ✗ Selected no to Adding \u0026#39;pvetest\u0026#39; repository ✗ Selected no to Disabling high availability 최신 버전 유지\napt update \u0026amp;\u0026amp; apt dist-upgrade Proxmox 보안 설정 (기본 방화벽 및 2FA)\n기본적으로 GUI로 방화벽을 설정하였다. 기본 설정 시 WebGUI (8006) and SSH (22)는 예외처리 되어 이외의 포트를 열려면 add rule로 source와 destination을 설정하면 된다.\n2단계 인증 2FA 설정을 해두는게 안심이 될거 같아 웹콘솔 내에서 다음 아래 경로로 설정해두었다.\nDatacenter → Permissions → Two Factor → TOTP → google auth, authy, ms auth 중 마음에 드는걸로 연동하면 된다. 나는 Google Authenticator을 사용하였다. ssh 접속도 2FA 설정을 하였으며\nlibpam-google-authenticator 설치\ngoogle-authenticator실행 (휴대폰 앱 연동 과정)\n/etc/pam.d/sshd 파일 수정\n해당 라인 추가 (ssh로그인 과정에서 google authenticator 모듈 필수 사용 설정 auth required pam_google_authenticator.so /etc/ssh/sshd_config 파일 수정\n해당 옵션 추가 (ssh서버가 PAM사용하고 인증시 chllenge-response 방식 사용하도록) ChallengeResponseAuthentication yes UsePAM yes 이 후 systemctl restart sshd 로 재시작하면 끝이다.\nUbuntu VM 생성 후 템플릿 만들기 Proxmox 템플릿은 말 그대로 vm을 생성하고 배포할 때 사용되는 표준화된 vm환경이다. 이를 사용하면 os, 네트워크 설정, 필요한 패키지 등이 이미 설치되어 서버 구성을 편하게 할 수 있다.\nhttps://community-scripts.github.io/ProxmoxVE/scripts?id=ubuntu2404-vm 스크립트를 통해 우분투 24.04 LTS VM 을 생성하였다.\n내가 생성한 옵션은 다음과 같다.\n🧩 Using Advanced Settings 🆔 Virtual Machine ID: 900 📦 Machine Type: q35 💾 Disk Size: 20G 💾 Disk Cache: Write Through 🏠 Hostname: ubuntu 🖥️ CPU Model: Host 🧠 CPU Cores: 2 🛠️ RAM Size: 2048 🌉 Bridge: vmbr0 🔗 MAC Address: 05:9C:CD:5F:2D:EE 🏷️ VLAN: Default ⚙️ Interface MTU Size: Default 🌐 Start VM when completed: no 🚀 Creating a Ubuntu 24.04 VM using the above advanced settings 이 후 Proxmox Web GUI 에서 위 vm스크립트에서 링크로 안내한 github discussion 의 설정을 참고하여\nCloud-Init 중 접속을 위한 유저와 패스워드 설정 생성한 VM에 접속하여 패키지 업데이트, QEMU Guest Agent 설치, 한국 타임존 설정을 하였다. sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y sudo apt install qemu-guest-agent -y sudo systemctl enable qemu-guest-agent timedatectl set-timezone Asia/Seoul Web GUI에서 Hardware→Hard Disk ssd의 경우 Discard 활성화 확인하고, Options → QEMU Guest Agent가 활성화 되어있는지 확인하였다. 템플릿으로 만들기 위해서 다음의 스크립트를 작성하여 실행하였다.\n#!/bin/bash echo \u0026#34;=== 템플릿 정리 시작 ===\u0026#34; # 1. Machine ID 초기화 (삭제하지 않고 빈 파일로 만들기) echo \u0026#34;Machine ID 초기화 중...\u0026#34; sudo truncate -s 0 /etc/machine-id sudo rm -f /var/lib/dbus/machine-id sudo ln -s /etc/machine-id /var/lib/dbus/machine-id # 2. SSH 호스트 키 제거 (복제 시 새로 생성됨) echo \u0026#34;SSH 호스트 키 제거 중...\u0026#34; sudo rm -f /etc/ssh/ssh_host_* # 3. 패키지 캐시 정리 echo \u0026#34;패키지 캐시 정리 중...\u0026#34; sudo apt clean sudo apt autoremove -y # 4. 임시 파일 정리 echo \u0026#34;임시 파일 정리 중...\u0026#34; sudo rm -rf /tmp/* sudo rm -rf /var/tmp/* # 5. 로그 파일 정리 (선택사항) echo \u0026#34;로그 파일 정리 중...\u0026#34; sudo truncate -s 0 /var/log/wtmp sudo truncate -s 0 /var/log/btmp # 6. 히스토리 정리 echo \u0026#34;사용자 히스토리 정리 중...\u0026#34; history -c rm -f ~/.bash_history sudo rm -f /root/.bash_history echo \u0026#34;=== 정리 작업 완료 ===\u0026#34; 모든 설정이 완료되면 VM을 완전히 종료한 후 템플릿으로 변환한다. Proxmox 웹 인터페이스에서 해당 VM을 우클릭하고 “Convert to template\u0026#34;을 선택하면 템플릿으로 변환이 된다.\n템플릿을 활용하여 VM 생성 방법 템플릿에서 새로운 VM을 생성할 때는 “Clone” 기능을 사용한다. Full Clone을 권장하며, 이는 완전히 독립적인 VM을 생성한다.\n이후, VM별로 cloud-init을 활용하여\n호스트명 사용자 계정 및 패스워드 SSH 공개 키 네트워크 설정 예를 들어 고정ip를 주고 싶다면 IP Config를 edit 한 뒤 Static으로 변경 후 IPv4/CIDR에는 192.168.0.60/24, Gateway(IPv4)에는 192.168.0.1을 주면 된다.) 등을 설정하면 된다.\n","date":1750809600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752278400,"objectID":"6fcc8528defc289ac17110c2f965079f","permalink":"https://onejflow.github.io/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---1/","publishdate":"2025-06-25T00:00:00Z","relpermalink":"/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---1/","section":"post","summary":"Proxmox 설치 후 초기 설정 및 VM 생성하기","tags":["DEV/HomeLab"],"title":"[Proxmox] 미니 HomeLab (홈서버) 구축기 with proxmox - 1","type":"post"},{"authors":null,"categories":["DEV"],"content":"구축을 시작하게 된 이유 AWS, GCP, Azure등 클라우드 서비스를 이용하는게 관리적 측면, 보안적 측면에서 편리하고, 현업에서도 클라우드를 사용해 배포를 하는 것이 일반적이라 더 실용적이라고 생각한다. 그래도 개발에 관심이 있다면 집에 서버 하나쯤은 있는게 낭만\n하지만 작은 서비스라도 사용하다보면 비용이 1년에 꽤나 나와 그 돈이면 컴퓨터를 살텐데? 라는 생각으로 홈 서버 구축을 결정했다. 그렇다, 서버 구축을 결정하게 된 이유는 돈이다.\n또한, 첫 직장이였던 금융AI 스타트업에서 온프레미스로 서버를 구축해 운영하던것을 보며 관심이 가기도 하였고, 직접 홈 서버를 운영 하면서 배우는 지식도 많을거라 생각한다.\n준비물 미니pc 내가 구매한 미니pc는 chatreey t9 intel n100 베어본 모델이며, 총 3대를 구매하였으며 알리익스프레스 할인 이벤트와 카드사 캐시백등을 이용하여 약 30만원에 구매하였다. Ram Ram은 집에 굴러다니던 16GB 램이 여러개 있어서 이를 활용하였다. SSD 공부용이기에 우선 작게 시작해보려 삼성전자 PM9B1 M.2 NVME 256GB 를 구매하였으며 개당 2만2천원이 들었다. UM2 200W 고속 PD충전기 및 C to C 충전케이블 미니pc에 전력을 공급하기 위해 구매하였으며 약 6만5천원에 구매하였다. 쿨링팬 클러스터랙 원래는 레고로 랙을 조립하였으나 우연히 쿨링팬이 포함된 미니pc거치대를 발견하여 구매하였으며 약 6만원에 구매하였다. iptime 공유기 위는 모두 물리 서버를 위한것이였다면, iptime 공유기는 네트워크 설정 및 미니pc를 클러스터링으로 묶기 위해 필요하며 집에 이미 사용중인 공유기를 활용하였다. 서버를 구축하기 위해 들어간 비용은 약 50만원이며 앞으로 최소 5년간 사용한다 치고 공부에 투자하는거면 나쁘지(?) 않다고 생각한다.\nProxmox 란? 서버 구축을 우분투 3대를 하려다 proxmox라는 하이퍼바이저를 알게 되었다. 나는 Proxmox로 우분투 vm 을 운영하려고 한다.\nProxmox는 가상 머신들과 컨테이너들을 관리하고 배포하는 가상화 플랫폼이다.\nProxmox는 VM과 LXC를 동시에 지원하고 있다.\nVM은 Proxmox에 별도의 OS를 추가로 생성하는것이며, 생성된 OS는 Proxmox와 완전히 격리되고 커널 또한 별도로 생성되고 관리된다. 별도의 OS가 생기기 때문에 VM을 사용했을 경우에는 하드웨어 자원을 LXC보다 상대적으로 많이 사용하게 된다.\nLXC의 경우 경량화된 OS를 제공해 설치할수 있고 Proxmox와 커널을 공유한다. 커널을 공유하기 때문에 직접적인 하드웨어 자원의 사용량이 적다. Docker 컨테이너 처럼 실제로 작동중인 APP만큼의 하드웨어 자원만 사용하기 때문에 효율적으로 사용할 수 있지만, 커널을 공유한다는 것은 Proxmox 시스템에 접근을 할수 있어, 다수의 LXC를 운용할 경우 간헐적으로 여러 문제가 생긴다고 한다.\nProxmox 설치 방법 부팅 USB 만들기 proxmox 공식 다운로드 페이지에서 iso 파일을 다운로드 받는다. 참고로 이 작업을 하기 전에 USB를 포맷해 줘야 하며, 나는 USB FAT 32로 포맷했다. 맥os라서 iso 파일을 USB로 바로 구울 수 없다. 다행히 이를 간단히 처리해 주는 balenaEtcher라는 프로그램이 있지만 터미널 명령어로 직접 만들었다. iso 파일 usb 드라이브로 변환하기\nhdiutil convert -format UDRW -o proxmox.iso proxmox-ve_8.2-2.iso iso 가 있는 파일 경로에서 위 명령어를 입력한다. hdiutil은 디스크 이미지 파일을 생성하고 변환할 수 있는 기능을 제공한다. UDRW(UDIF read/write image) 형태로 변환하는 명령어이고. -o proxmox.iso는 파일 이름을 proxmox.iso로 바꾼다는 뜻이다. 변환 뒤 proxmox.iso.dmg 파일이 생성된다. 파일 확장자 iso로 변경하기\nmv proxmox.iso.dmg proxmox.iso usb 연결 후 diskutil list로 연결 확인(나 같은 경우 /dev/disk4)\nusb unmount 하기\ndiskutil unmountDisk /dev/disk4 iso 파일이 있는 디렉토리에서 usb 에 iso 이미지 파일 쓰기\nsudo dd if=./proxmox.iso of=/dev/disk4 bs=1m 제대로 쓰기가 되었는지 diskutil list로 usb disk의 파티션 구조 확인\n만약 부팅 usb를 다시 포맷해야한다면? USB 파티션 구조를 인식하지 못하고 있기 때문에 일반적인 erase 옵션이 먹히지 않으므로 MBR(Master Boot Record) 옵션을 이용하여 정상적으로 포맷한다. diskutil eraseDisk FAT32 USB MBR /dev/disk4 바이오스 진입 후 Boot option usb로 proxmox 설치 바이오스 진입 방법은 제조사마다 다르므로 확인이 필요하다. SVM Mode Enabled, IOMMU 또는 SR-IOV support 도 Enabled 로 변경, WOL(wake-on-lan) 정도 설정을 한뒤 설치 usb로 부팅 선택 후, 옵션 저장 \u0026amp; 재부팅 한다. 이후 설치 과정 Install Proxmox VE 를 선택 후 쭉 진행하면 된다. 참고로 기본 계정명은 root이고 비밀번호는 설치할 때 설정한 것이다. ","date":1750723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1750723200,"objectID":"c5169be7a3f7c0b8b17f466ff1a4c491","permalink":"https://onejflow.github.io/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---0/","publishdate":"2025-06-24T00:00:00Z","relpermalink":"/post/3.resource/dev/homelab/%EB%AF%B8%EB%8B%88-homelab-%ED%99%88%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%EA%B8%B0-with-proxmox---0/","section":"post","summary":"HomeLab 쿠치쿠시테야루","tags":["DEV/HomeLab"],"title":"[Proxmox] 미니 HomeLab (홈서버) 구축기 with proxmox - 0","type":"post"},{"authors":null,"categories":["Essay"],"content":"대학원 다닐 초반에 당시 남들이 많이 하던 jeykyll로 블로그 만들기를 따라하며 블로그를 만든적이 있었으나, 글을 작성하는 목적이 크게 따로 없었어서 금방 방치하게 되었다.\n그러다 예상치 못한 첫 이직을 겪으면서, 커리어와 성장에 대한 고민이 깊어졌다. 떠오르는 생각들을 기록 하지 않으면 시간이 흘러 결국 희미해지기에, 지금부터라도 기록하지 않으면 미래의 나에게 아무것도 남기지 못할까 겸사겸사 개인적으로 공부하는것 들을 기록할겸 미뤄두었던 블로그를 다시 시작한다.\n이번에는 빠르고 배포가 간단한 hugo로 기술블로그를 만들어보았고, GitHub Actions를 활용하여 블로그 소스 저장소에 포스트를 작성 후 push하면 자동으로 GitHub Pages에 배포되도록 설정하였다.\n전체 구조 블로그의 큰 그림을 보자면, 3개의 Github 레포지토리를 만들었다.\ngithub-style: hugo블로그의 테마 저장소 이며 기존의 github-style을 포크하여 몇몇 설정을 변경하였다. onejflow_blog: 블로그의 소스 저장소 이며 소스코드와 포스트를 관리하며 private repo로 관리한다. onejflow.github.io: 배포 저장소 이며 Github Actions를 통해 onejflow_blog에 변경사항이 있을 때마다 자동으로 Hugo로 정적 사이트를 빌드하고 배포되는곳이다. 블로그 구축 순서 먼저 로컬에서 개발하기 위해 hugo를 설치해주어야 한다. github 에 소스를 관리할 repository와 블로그 배포를 할 github pages repository를 만든다. github pages 같은 경우 .github.io 로 하여야 한다. 로컬에서 hugo new site projectname 으로 블로그 소스를 관리할 프로젝트를 생성, git init 후 원격 저장소를 추가 한다. Hugo Themes 사이트에서 원하는 hugo 테마를 선정하여 그대로 사용하거나 github에 포크하여 커스텀 한다. 블로그 소스를 관리할 프로젝트 디렉토리에 hugo theme을 서브모듈로 추가한다. git submodule add 레포지토리주소.git themes/테마명 ex) git submodule add https://github.com/onejflow/github-style.git themes/github-style 프로젝트 루트에 hugo.toml 을 생성하거나 수정하여 자신의 블로그로 셋팅한다. GitHub Actions로 Github Pages 저장소 배포 셋팅 로컬 환경에서 SSH 키 생성 (gh-pages비밀키 및 gh-pages.pub 공개키 파일 생성) `ssh-keygen -t rsa -b 4096 -C “$(git config user.email)” -f gh-pages -N \u0026#34;\u0026#34; 공개 키(gh-pages.pub)를 GitHub Pages 저장소(onejflow.github.io)의 설정에 추가한다. GitHub Pages 저장소로 이동 후, Settings \u0026gt; Deploy keys 메뉴에서 “Add deploy key” 버튼을 클릭한다. Title에 적절한 이름(예: “Hugo Deploy Key”)을 입력, Key에 gh-pages.pub 파일의 내용을 붙여넣는다. “Allow write access” 옵션을 체크한다. 비밀 키(gh-pages)를 소스 저장소(onejflow_blog)의 시크릿에 추가 한다. github 소스 저장소로 이동한 뒤, Settings \u0026gt; Secrets \u0026gt; Actions 메뉴로 이동한다 “New repository secret” 버튼을 클릭 후 Name에 “ACTIONS_DEPLOY_KEY\u0026#34;를 입력한 뒤 Value에 gh-pages 파일의 내용을 붙여넣는다. GitHub Actions 워크플로우 파일 설정 소스 저장소에 GitHub Actions 워크플로우 파일을 생성\n.github/workflows/ 디렉토리를 생성 main.yml 파일을 생성하고 다음 내용을 추가한다. name: GitHub Pages on: push: branches: - main # 또는 master (메인 브랜치 이름에 따라 다름) jobs: build-deploy: runs-on: ubuntu-latest steps: - name: Checkout with submodules uses: actions/checkout@v4 with: submodules: \u0026#39;recursive\u0026#39; fetch-depth: 0 - name: Hugo Cache Setup uses: actions/cache@v3 with: path: | resources/_gen ~/.cache/hugo key: ${{ runner.os }}-hugo-${{ hashFiles(\u0026#39;go.mod\u0026#39;) }} - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --gc --minify --cleanDestinationDir env: TZ: \u0026#39;Asia/Seoul\u0026#39; HUGO_ENV: \u0026#39;production\u0026#39; - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: onejflow/onejflow.github.io # 배포할 깃헙 페이지 publish_branch: main # 또는 master (GitHub Pages 저장소의 기본 브랜치) publish_dir: ./public env: TZ: \u0026#39;Asia/Seoul\u0026#39; GitHub Pages 저장소 페이지 배포 설정 구성 마지막으로 GitHub Pages 저장소에서 페이지 배포 설정을 구성한다.\nGitHub Pages 저장소(onejflow.github.io)의 Settings \u0026gt; Pages로 이동 Source 섹션에서 ‘Deploy from a branch’ 선택 Branch 드롭다운에서 ‘main’ 또는 ‘master’ 선택 (GitHub Pages 저장소의 기본 브랜치) Google search console 등록 google search console 인증을 URL prefix / HTML Tag 방식으로 받기위해 테마저장소의 extended_head.html 에 아래와 같이 작성 후,\n\u0026lt;!-- Google Site verification--\u0026gt;\u0026gt; {{ with .Site.Params.googleSiteVerification }} \u0026lt;meta name=\u0026#34;google-site-verification\u0026#34; content=\u0026#34;{{ . }}\u0026#34; /\u0026gt; {{ end }} 소스 저장소의 hugo.toml 파일 params에 google search console에서 복사하라는 content 값을 추가해주었다.\n이 외에도 hugo.toml에 아래와 같이 robots.txt 와 sitemap.xml 을 생성하도록 하였고 google search console에 sitemaps탭에 제출하였다\nenableRobotsTXT = true [sitemap] changefreq = \u0026#34;daily\u0026#34; filename = \u0026#34;sitemap.xml\u0026#34; priority = 0.5 Google Analytics 4 트래킹 이 부분은 간단하다, GA4 콘솔을 시작하고 Measurement ID를 hugo.toml 에 다음과 같이 추가해주면 된다.\ngoogleAnalytics = \u0026#34;G-xxxxxxxx\u0026#34; ","date":1750723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1752971956,"objectID":"e70ffb6347236a9282c5a07041088890","permalink":"https://onejflow.github.io/post/3.resource/essay/blog-%EA%B5%AC%EC%B6%95%EA%B8%B0/","publishdate":"2025-06-24T00:00:00Z","relpermalink":"/post/3.resource/essay/blog-%EA%B5%AC%EC%B6%95%EA%B8%B0/","section":"post","summary":"\bHugo와 github pages로 블로그를 만들어 보자","tags":["hugo","blog"],"title":"[TechBlog] Hugo 기술블로그 구축기","type":"post"},{"authors":null,"categories":[],"content":"Profile About 핀테크 기업에서 Data Scientist로 계량경제학과 ML/DL 기법을 활용해 의사결정을 위한 복잡한 측정 문제를 해결해왔습니다. 고객 데이터를 분석하여 예측 모델을 개발하고, 인과관계 모델링을 통해 마케팅 효과를 정량화/최대화 하는 등 다양한 프로젝트를 주도적으로 수행했습니다.\n현재는 Data/AI Consultant로, 기술적 이해를 기반으로 기업이 데이터와 AI를 활용해 비즈니스 가치를 극대화할 수 있도록 돕는 컨설팅 업무를 담당하고 있습니다.\nよくやる","date":1746420881,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1746421541,"objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://onejflow.github.io/about/","publishdate":"2025-05-05T13:54:41+09:00","relpermalink":"/about/","section":"","summary":"","tags":null,"title":"About","type":"page"}]